{"id":"../node_modules/tar/lib/buffer-entry.js","dependencies":[{"name":"/Users/aledavalos/Desktop/motivational_calendar/package.json","includedInParent":true,"mtime":1635200505495},{"name":"/Users/aledavalos/Desktop/motivational_calendar/node_modules/tar/package.json","includedInParent":true,"mtime":1635177474342},{"name":"inherits","loc":{"line":10,"column":23},"parent":"/Users/aledavalos/Desktop/motivational_calendar/node_modules/tar/lib/buffer-entry.js","resolved":"/Users/aledavalos/Desktop/motivational_calendar/node_modules/inherits/inherits_browser.js"},{"name":"./entry.js","loc":{"line":11,"column":20},"parent":"/Users/aledavalos/Desktop/motivational_calendar/node_modules/tar/lib/buffer-entry.js","resolved":"/Users/aledavalos/Desktop/motivational_calendar/node_modules/tar/lib/entry.js"},{"name":"buffer","parent":"/Users/aledavalos/Desktop/motivational_calendar/node_modules/tar/lib/buffer-entry.js","resolved":"/Users/aledavalos/Desktop/motivational_calendar/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n// just like the Entry class, but it buffers the contents\n//\n// XXX It would be good to set a maximum BufferEntry filesize,\n// since it eats up memory.  In normal operation,\n// these are only for long filenames or link names, which are\n// rarely very big.\n\nmodule.exports = BufferEntry\n\nvar inherits = require(\"inherits\")\n  , Entry = require(\"./entry.js\")\n\nfunction BufferEntry () {\n  Entry.apply(this, arguments)\n  this._buffer = new Buffer(this.props.size)\n  this._offset = 0\n  this.body = \"\"\n  this.on(\"end\", function () {\n    this.body = this._buffer.toString().slice(0, -1)\n  })\n}\n\ninherits(BufferEntry, Entry)\n\n// collect the bytes as they come in.\nBufferEntry.prototype.write = function (c) {\n  c.copy(this._buffer, this._offset)\n  this._offset += c.length\n  Entry.prototype.write.call(this, c)\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/tar/lib/buffer-entry.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}}],"sources":{"../node_modules/tar/lib/buffer-entry.js":"// just like the Entry class, but it buffers the contents\n//\n// XXX It would be good to set a maximum BufferEntry filesize,\n// since it eats up memory.  In normal operation,\n// these are only for long filenames or link names, which are\n// rarely very big.\n\nmodule.exports = BufferEntry\n\nvar inherits = require(\"inherits\")\n  , Entry = require(\"./entry.js\")\n\nfunction BufferEntry () {\n  Entry.apply(this, arguments)\n  this._buffer = new Buffer(this.props.size)\n  this._offset = 0\n  this.body = \"\"\n  this.on(\"end\", function () {\n    this.body = this._buffer.toString().slice(0, -1)\n  })\n}\n\ninherits(BufferEntry, Entry)\n\n// collect the bytes as they come in.\nBufferEntry.prototype.write = function (c) {\n  c.copy(this._buffer, this._offset)\n  this._offset += c.length\n  Entry.prototype.write.call(this, c)\n}\n"},"lineCount":32}},"error":null,"hash":"a13a76b1029f7473367fd7bc991007ac","cacheData":{"env":{}}}